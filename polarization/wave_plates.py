import numpy as np
import matplotlib.pyplot as plt
from malus import process_data
import os
import pandas as pd
from numpy import sin, cos
from scipy.optimize import curve_fit
from sklearn.metrics import r2_score


step = 10


def get_data(directory_path):
    data_list = []

    # Loop through all files in the directory
    for filename in os.listdir(directory_path):
        if filename.endswith(".xlsx") or filename.endswith(".xls"):
            file_path = os.path.join(directory_path, filename)

            # Read Excel file skipping the first 6 rows
            df = pd.read_excel(file_path, skiprows=6)

            # Extract the first two columns as numpy arrays
            column1 = np.array(df.iloc[:, 0])
            column2 = np.array(df.iloc[:, 1])

            # Append the data as a tuple to the list
            data_list.append((column1, column2))

    return data_list


def get_single(file_path):
    # Read the Excel file into a DataFrame, skipping the first 6 rows
    df = pd.read_excel(file_path, skiprows=6)

    # Extract the first two columns as numpy arrays
    first_column_array = df.iloc[:, 0].to_numpy()
    second_column_array = df.iloc[:, 1].to_numpy()

    return first_column_array, second_column_array


def fix_data(data):
    res = []
    for data_set in data:
        res.append(process_data(data_set, step))
    return res


def plot_folder(folder_name):
    data = get_data(folder_name)
    data = fix_data(data)
    for data_set in data:
        x, y = data_set
        plt.plot(x, y)
    plt.grid()
    plt.show()


def amp2(state, A, phi, p1, p2):
    alpha, theta = state
    alpha, theta, phi, p1, p2 = np.radians(alpha), np.radians(theta), np.radians(phi), np.radians(p1), np.radians(p2)
    alpha, theta = alpha - p1, theta - p2
    first = sin(alpha)*sin(theta) + cos(alpha)*cos(theta)*cos(phi)
    second = cos(alpha)*cos(theta)*sin(phi)
    return A*(first**2 + second**2)


def simple_model(theta, alpha, A, p1):
    phi = 90
    theta = theta - p1
    return amp2((alpha, theta), A, phi, 0, p1)


def half_model(theta, alpha, A, p1):
    phi = 180
    theta = theta - p1
    return amp2((alpha, theta), A, phi, 0, p1)


def fit_single10():
    fit_single('quarter_waveplate/plate10.xlsx', 10)


def fit_single350():
    fit_single('quarter_waveplate/plate350.xlsx', 350)


def fit_single(file, number):
    data = get_single(file)
    x, y = process_data(data, step)
    x_err = [2 for val in x]
    y_err = [2 for val in y]
    plt.errorbar(x, y, xerr=x_err, yerr=y_err, fmt='.', label='data')
    model = simple_model
    params, covariance = curve_fit(model, x, y, p0=[-25, 175, 0])
    variance = np.diag(covariance)
    print(params)
    print(variance)
    r2 = r2_score(y, model(x, *params))
    print(r2)
    x_fit = np.linspace(np.min(x), np.max(x), 1000)
    y_fit = model(x_fit, *params)
    plt.plot(x_fit, y_fit, label='fit')
    plt.xlabel('$\\theta$ [$^\circ$]')
    plt.ylabel('laser strength [$\mu$A]')
    plt.grid()
    plt.legend()
    plt.title('quarter wave at $\\alpha=$' + str(number) + '$^\circ$')
    plt.show()


def plot_alpha():
    x = [-10, 10, 30, 35, 40, 60]
    y = [8, 28, 48, 48, 57, 11+90]
    plt.scatter(x, y)
    plt.grid()
    plt.xlabel('$\\alpha$ measured in lab')
    plt.ylabel('$\\alpha$ generated by fit')
    plt.show()


def fit_half_plate(number):
    file = 'half_waveplate/plate' + str(number) + '.xlsx'
    data = get_single(file)
    x, y = process_data(data, step)
    x_err = [2 for val in x]
    y_err = [2 for val in y]
    plt.errorbar(x, y, xerr=x_err, yerr=y_err, fmt='.', label='data')
    model = simple_model
    params, covariance = curve_fit(model, x, y, p0=[-25, 175, 0])
    variance = np.diag(covariance)
    print(params)
    print(variance)
    r2 = r2_score(y, model(x, *params))
    print(r2)
    x_fit = np.linspace(np.min(x), np.max(x), 1000)
    y_fit = model(x_fit, *params)
    plt.plot(x_fit, y_fit, label='fit')
    plt.xlabel('$\\theta$ [$^\circ$]')
    plt.ylabel('laser strength [$\mu$A]')
    plt.grid()
    plt.legend()
    plt.title('half wave at $\\alpha=$' + str(number) + '$^\circ$')
    plt.show()


if __name__ == "__main__":
    # # plot_folder('quarter_waveplate')
    # # fit_single350()
    # # fit_single10()
    # # fit_single('quarter_waveplate/plate30.xlsx', 30)
    # # fit_single('quarter_waveplate/plate35.xlsx', 35)
    # # fit_single('quarter_waveplate/plate40.xlsx', 40)
    # # fit_single('quarter_waveplate/plate60.xlsx', 60)
    # plot_alpha()

    # fit_half_plate(0)
    # fit_half_plate(30)
    # fit_half_plate(60)
    # fit_half_plate(90)
    pass