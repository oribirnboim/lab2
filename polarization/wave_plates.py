import numpy as np
import matplotlib.pyplot as plt
from malus import process_data
import os
import pandas as pd
from numpy import sin, cos
from scipy.optimize import curve_fit
from sklearn.metrics import r2_score
import re


step = 10


def get_data(directory_path):
    data_list = []
    alpha = []
    for filename in os.listdir(directory_path):
        if filename.endswith(".xlsx") or filename.endswith(".xls"):
            file_path = os.path.join(directory_path, filename)
            c1, c2, a = get_single(file_path)
            data_list.append((c1, c2))
            alpha.append(a)
    return data_list, alpha


def get_single(file_path):
    df = pd.read_excel(file_path, skiprows=6)
    alpha = int(re.search(r'\d+', file_path).group())
    first_column_array = df.iloc[:, 0].to_numpy()
    second_column_array = df.iloc[:, 1].to_numpy()
    c1, power = process_data((first_column_array, second_column_array), step)
    theta = (c1 - alpha)
    return theta, power, alpha


def fix_data(data):
    res = []
    for data_set in data:
        res.append(process_data(data_set, step))
    return res


def plot_folder(folder_name):
    data = get_data(folder_name)
    for data_set in data:
        x, y = data_set
        plt.plot(x, y)
    plt.grid()
    plt.show()


def quarter_polar():
    ax = plt.subplot(111, projection='polar')

    for file in ['quarter_waveplate/plate35.xlsx', 'quarter_waveplate/plate350.xlsx', 'quarter_waveplate/plate80.xlsx']:
        theta, power, alpha = get_single(file)
        theta = theta*np.pi/180
        theta_err, power_err = [0.03 for v in theta], [2 for v in power]
        ax.errorbar(x=theta, y=power, xerr=theta_err, yerr=power_err, fmt='', linestyle='', label=f'$\\alpha={alpha}^\circ$')
    
    ax.legend()
    ax.grid(True)
    ax.set_rmax(180)
    plt.show()


def elliptical_polar():
    ax = plt.subplot(111, projection='polar')
    file = 'quarter_waveplate/plate10.xlsx'
    theta, power, alpha = get_single(file)
    theta = theta*np.pi/180
    theta_err, power_err = [0.03 for v in theta], [2 for v in power]
    ax.errorbar(x=theta, y=power, xerr=theta_err, yerr=power_err, fmt='', linestyle='', label=f'$\\alpha={alpha}^\circ$')
    
    ax.legend()
    ax.grid(True)
    ax.set_rmax(180)
    plt.show()


def polar_plot_folder(folder_name):
    data, alphas = get_data(folder_name)
    for i in range(len(data)):
        data_set = data[i]
        alpha = alphas[i]
        x, y = data_set
        plt.polar(x*np.pi/180, y)
        plt.title(alpha)
        plt.grid()
        plt.grid()
        plt.show()



def amp2(state, A, phi, p1, p2):
    alpha, theta = state
    alpha, theta, phi, p1, p2 = np.radians(alpha), np.radians(theta), np.radians(phi), np.radians(p1), np.radians(p2)
    alpha, theta = alpha - p1, theta - p2
    first = sin(alpha)*sin(theta) + cos(alpha)*cos(theta)*cos(phi)
    second = cos(alpha)*cos(theta)*sin(phi)
    return A*(first**2 + second**2)


def simple_model(theta, alpha, A, p1):
    phi = 90
    theta = theta - p1
    return amp2((alpha, theta), A, phi, 0, p1)


def half_model(theta, alpha, A, p1):
    phi = 180
    theta = theta - p1
    return amp2((alpha, theta), A, phi, 0, p1)


def fit_single10():
    fit_single('quarter_waveplate/plate10.xlsx', 10)


def fit_single350():
    fit_single('quarter_waveplate/plate350.xlsx', 350)


def fit_single(file, number):
    data = get_single(file)
    x, y = process_data(data, step)
    x_err = [2 for val in x]
    y_err = [2 for val in y]
    plt.errorbar(x, y, xerr=x_err, yerr=y_err, fmt='.', label='data')
    model = simple_model
    params, covariance = curve_fit(model, x, y, p0=[-25, 175, 0])
    variance = np.diag(covariance)
    print(params)
    print(variance)
    r2 = r2_score(y, model(x, *params))
    print(r2)
    x_fit = np.linspace(np.min(x), np.max(x), 1000)
    y_fit = model(x_fit, *params)
    plt.plot(x_fit, y_fit, label='fit')
    plt.xlabel('$\\theta$ [$^\circ$]')
    plt.ylabel('laser strength [$\mu$A]')
    plt.grid()
    plt.legend()
    plt.title('quarter wave at $\\alpha=$' + str(number) + '$^\circ$')
    plt.show()


def plot_alpha():
    x = [-10, 10, 30, 35, 40, 60]
    y = [8, 28, 48, 48, 57, 11+90]
    plt.scatter(x, y)
    plt.grid()
    plt.xlabel('$\\alpha$ measured in lab')
    plt.ylabel('$\\alpha$ generated by fit')
    plt.show()


def plot_halfwave():
    data, alpha = get_data('half_waveplate')
    roots = []
    for i in range(len(data)):
        data_set = data[i]
        x, y = data_set
        x = x%180
        x_err = [2 for val in x]
        y_err = [4 for val in y]
        label = '$\\alpha=$' + str(alpha[i]) + '$^\circ$'
        params, variance, r2 = fit_half_plate(data_set)
        print(params)
        print(variance)
        print(r2)
        x_fit = np.linspace(np.min(x), np.max(x), 1000)
        y_fit = half_model(x_fit, *params)
        minimum = x_fit[np.argmin(y_fit)]
        print(minimum)
        roots.append(minimum)
        color = plt.cm.viridis(i / 5.0)
        plt.errorbar(x, y, xerr=x_err, yerr=y_err, fmt='.', color=color)
        plt.plot(x_fit, y_fit, label=label, color=color)

    plt.plot(roots, [0 for _ in roots], 'o', markersize=10, color='r', label='minimum points')
    plt.xlabel('$\\theta [^\circ]$')
    plt.ylabel('I $[\mu A]$')
    plt.legend()
    plt.grid()
    plt.show()


def fit_half_plate(data_set):
    x, y = data_set
    model = half_model
    lower, upper = [0, 0, 0], [360, 200, 180]
    params, covariance = curve_fit(model, x, y, p0=[25, 175, 0], bounds=(lower, upper))
    variance = np.diag(covariance)
    r2 = r2_score(y, model(x, *params))
    return params, variance, r2


if __name__ == "__main__":
    # quarter_polar()
    plot_halfwave()
    # elliptical_polar()

